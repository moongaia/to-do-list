{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","savedToDos","localStorage","getItem","parsedToDos","JSON","parse","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","Wrapper","styled","form","Input","input","Button","button","CreateToDo","useRecoilValue","setToDos","useSetRecoilState","useForm","register","handleSubmit","setValue","setItem","stringify","onSubmit","oldToDos","text","id","Date","now","required","placeholder","className","div","ToDoContent","span","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","DOING","DONE","WrapperItem","Title","h1","SelectorInput","ToDoList","useRecoilState","setCategory","value","onInput","map","GlobalStyle","createGlobalStyle","App","ReactDOM","render","StrictMode","theme","bgColor","textColor","accentColor","cardBgColor","document","getElementById"],"mappings":"0HAEYA,E,8EAAAA,K,cAAAA,E,cAAAA,E,aAAAA,M,KAYL,I,MAAMC,EAAgBC,YAAiB,CAC5CC,IAAK,WACLC,QAASJ,EAAWK,QAGhBC,EAAaC,aAAaC,QAAQ,SAClCC,EAAcC,KAAKC,MAAML,GAElBM,EAAYV,YAAc,CACrCC,IAAK,OACLC,QAASE,EAAaG,EAAc,KAGzBI,EAAeC,YAAS,CACnCX,IAAK,eACLY,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAC,EAAQD,EAAIH,GACZK,EAAWF,EAAId,GACrB,OAAOe,EAAME,QAAO,SAACC,GAAD,OAAUA,EAAKF,WAAaA,Q,sBCvB9CG,EAAUC,IAAOC,KAAV,0BAEPC,EAAQF,IAAOG,MAAV,oUAcLC,EAASJ,IAAOK,OAAV,mSAgDGC,I,MAAAA,EAlCf,WACE,IACMrB,EAAasB,YAAehB,GAC5BiB,EAAWC,YAAkBlB,GAC7BK,EAAWW,YAAe3B,GAJZ,EAKyB8B,cAArCC,EALY,EAKZA,SAAUC,EALE,EAKFA,aAAcC,EALZ,EAKYA,SAgBhC,OARA3B,aAAa4B,QAZK,QAYczB,KAAK0B,UAAU9B,IAS7C,eAACc,EAAD,CAASiB,SAAUJ,GAhBD,SAAC,GAAqB,IAAnBd,EAAkB,EAAlBA,KACrBU,GAAS,SAACS,GAAD,OACP,CAAEC,KAAMpB,EAAMqB,GAAIC,KAAKC,MAAOzB,aADvB,mBAEJqB,OAELJ,EAAS,OAAQ,OAWjB,UACE,cAACX,EAAD,2BACMS,EAAS,OAAQ,CAAEW,SAAU,0BADnC,IAEEC,YAAY,mBAEd,cAACnB,EAAD,UACE,mBAAGoB,UAAU,4BC9DfzB,EAAUC,IAAOyB,IAAV,0EAKPC,EAAc1B,IAAO2B,KAAV,yKAOXvB,EAASJ,IAAOK,OAAV,8MAkEGuB,I,QAAAA,EAvDf,YAA8C,IAA9BV,EAA6B,EAA7BA,KAAMtB,EAAuB,EAAvBA,SAAUuB,EAAa,EAAbA,GACxBX,EAAWC,YAAkBlB,GAE7BsC,EAAU,SAACC,GAAgD,IAE5CC,EACfD,EADFE,cAAiBD,KAEnBvB,GAAS,SAACS,GACR,IAAMgB,EAAchB,EAASiB,WAAU,SAACpC,GAAD,OAAUA,EAAKqB,KAAOA,KAEvDgB,EAAU,CAAEjB,OAAMC,KAAIvB,SAAUmC,GACtC,MAAM,GAAN,mBACKd,EAASmB,MAAM,EAAGH,IADvB,CAEEE,GAFF,YAGKlB,EAASmB,MAAMH,EAAc,SAgBtC,OACE,eAAC,EAAD,WACE,cAACP,EAAD,UAAcR,IACbtB,IAAajB,EAAW0D,OACvB,cAAC,EAAD,CAAQN,KAAMpD,EAAW0D,MAAOR,QAASA,EAAzC,SACE,mBAAGL,UAAU,2BAGhB5B,IAAajB,EAAWK,OACvB,cAAC,EAAD,CAAQ+C,KAAMpD,EAAWK,MAAO6C,QAASA,EAAzC,SACE,mBAAGL,UAAU,qBAGhB5B,IAAajB,EAAW2D,MACvB,cAAC,EAAD,CAAQP,KAAMpD,EAAW2D,KAAMT,QAASA,EAAxC,SACE,mBAAGL,UAAU,0BAGjB,cAAC,EAAD,CAAQO,KAAK,SAASF,QA7BT,SAACC,GAIH,WADTA,EADFE,cAAiBD,MAGjBvB,GAAS,SAACS,GACR,OAAOA,EAASpB,QAAO,SAACC,GAAD,OAAUA,EAAKqB,KAAOA,SAuB/C,SACE,mBAAGK,UAAU,2BCtEfzB,EAAUC,IAAOyB,IAAV,mFAKPc,EAAcvC,IAAOyB,IAAV,mMAUXe,EAAQxC,IAAOyC,GAAV,4FAMLC,EAAgB1C,IAAOyB,IAAV,0PAyCJkB,I,EAAAA,EA7Bf,WACE,IAAMhD,EAAQY,YAAef,GADX,EAEcoD,YAAehE,GAF7B,mBAEXgB,EAFW,KAEDiD,EAFC,KAQlB,OACE,cAAC,EAAD,UACE,eAACN,EAAD,WACE,cAACC,EAAD,yBAEA,eAACE,EAAD,WACE,yBAAQI,MAAOlD,EAAUmD,QAVjB,SAACjB,GACfe,EAAYf,EAAME,cAAcc,QAS1B,UACE,wBAAQA,MAAOnE,EAAWK,MAA1B,mBACA,wBAAQ8D,MAAOnE,EAAW0D,MAA1B,mBACA,wBAAQS,MAAOnE,EAAW2D,KAA1B,qBAEF,cAAC,EAAD,OATJ,OAWG3C,QAXH,IAWGA,OAXH,EAWGA,EAAOqD,KAAI,SAAClD,GAAD,OACV,cAAC,EAAD,eAAwBA,GAAbA,EAAKqB,aC3DpB8B,EAAcC,YAAH,4BAWFC,MARf,WACE,OACE,qCACE,cAACF,EAAD,IACA,cAAC,EAAD,QCHNG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAeC,MCRkB,CACrCC,QAAS,UACTC,UAAW,QACXC,YAAa,UACbC,YAAa,aDIT,SACE,cAAC,EAAD,UAINC,SAASC,eAAe,W","file":"static/js/main.f247df28.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport enum Categories {\n  \"TO_DO\" = \"TO_DO\",\n  \"DOING\" = \"DOING\",\n  \"DONE\" = \"DONE\",\n} // enum은 기본적으로 type이 number임\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: Categories;\n}\n\nexport const categoryState = atom<Categories>({\n  key: \"category\",\n  default: Categories.TO_DO,\n});\n\nconst savedToDos = localStorage.getItem(\"toDos\");\nconst parsedToDos = JSON.parse(savedToDos as string);\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: savedToDos ? parsedToDos : [],\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n}\n\nconst Wrapper = styled.form``;\n\nconst Input = styled.input`\n  font-family: \"CookieRun-Regular\";\n  font-size: 18px;\n  padding: 6px 8px;\n  border-radius: 5px;\n  border: transparent;\n  border-bottom: #4e2b00 4px solid;\n  outline: none;\n  background-color: #a8bb5c;\n  margin: 0px 8px;\n  @media screen and (max-width: 370px) {\n    width: 150px;\n  }\n`;\nconst Button = styled.button`\n  font-size: 25px;\n  color: #4e2b00;\n  cursor: pointer;\n  padding: 10px 8px;\n  border-radius: 5px;\n  border: transparent;\n  background-color: #a8bb5c;\n  :hover {\n    color: #fff8e6;\n    transition: all 0.2s ease-in-out;\n    transform: scale(1.2);\n  }\n`;\nfunction CreateToDo() {\n  const TODOS_KEY = \"toDos\";\n  const savedToDos = useRecoilValue(toDoState);\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category },\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n  localStorage.setItem(TODOS_KEY, JSON.stringify(savedToDos));\n  // const savedToDos = localStorage.getItem(TODOS_KEY);\n  // if (savedToDos) {\n  //   const parsedToDos = JSON.parse(savedToDos);\n  //   toDos = parsedToDos;\n  //   console.log(parsedToDos);\n  // }\n\n  return (\n    <Wrapper onSubmit={handleSubmit(handleValid)}>\n      <Input\n        {...register(\"toDo\", { required: \"Please write a To-Do\" })}\n        placeholder=\"Write a to do\"\n      />\n      <Button>\n        <i className=\"fas fa-pencil-alt\"></i>\n      </Button>\n    </Wrapper>\n  );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { Categories, IToDo, toDoState } from \"../atoms\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst ToDoContent = styled.span`\n  font-size: 22px;\n  color: #005b4d;\n  margin-top: 20px;\n  background: linear-gradient(180deg, rgba(255, 255, 255, 0) 70%, #907d4c 90%);\n`;\n\nconst Button = styled.button`\n  margin-top: 20px;\n  padding: 5px 3px;\n  cursor: pointer;\n  border: transparent;\n  border-radius: 50%;\n  background-color: #a8bb5c;\n  font-size: 15px;\n  color: #fff8e6;\n`;\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const setToDos = useSetRecoilState(toDoState);\n\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      //   const oldToDo = oldToDos[targetIndex];\n      const newToDo = { text, id, category: name as any };\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n\n  const onDelete = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n    if (name === \"delete\") {\n      setToDos((oldToDos) => {\n        return oldToDos.filter((toDo) => toDo.id !== id);\n      });\n    }\n  };\n\n  return (\n    <Wrapper>\n      <ToDoContent>{text}</ToDoContent>\n      {category !== Categories.DOING && (\n        <Button name={Categories.DOING} onClick={onClick}>\n          <i className=\"fas fa-business-time\"></i>\n        </Button>\n      )}\n      {category !== Categories.TO_DO && (\n        <Button name={Categories.TO_DO} onClick={onClick}>\n          <i className=\"fas fa-list-ul\"></i>\n        </Button>\n      )}\n      {category !== Categories.DONE && (\n        <Button name={Categories.DONE} onClick={onClick}>\n          <i className=\"fas fa-check-circle\"></i>\n        </Button>\n      )}\n      <Button name=\"delete\" onClick={onDelete}>\n        <i className=\"fas fa-trash-alt\"></i>\n      </Button>\n    </Wrapper>\n  );\n}\n\nexport default ToDo;\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport styled from \"styled-components\";\nimport { Categories, categoryState, toDoSelector } from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nconst Wrapper = styled.div`\n  font-family: \"CookieRun-Regular\";\n  height: 100vh;\n`;\n\nconst WrapperItem = styled.div`\n  background-color: #a8bb5c;\n  /* background-color: #ffc75f; */\n  border-radius: 15px;\n  /* width: 35%; */\n  max-width: 620px;\n  height: 80%;\n  margin: 0 auto;\n`;\n\nconst Title = styled.h1`\n  color: #005b4d;\n  text-align: center;\n  padding-top: 55px;\n`;\n\nconst SelectorInput = styled.div`\n  display: flex;\n  justify-content: center;\n  & > select {\n    font-family: \"CookieRun-Regular\";\n    padding: 0px 5px;\n    margin-top: 10px;\n    height: 35px;\n    border-radius: 5px;\n    border: transparent;\n  }\n`;\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState); // atom value & modifier함수 반환\n\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n\n  return (\n    <Wrapper>\n      <WrapperItem>\n        <Title>TO DO LIST</Title>\n        {/* <hr /> */}\n        <SelectorInput>\n          <select value={category} onInput={onInput}>\n            <option value={Categories.TO_DO}>To Do</option>\n            <option value={Categories.DOING}>Doing</option>\n            <option value={Categories.DONE}>Done</option>\n          </select>\n          <CreateToDo />\n        </SelectorInput>\n        {toDos?.map((toDo) => (\n          <ToDo key={toDo.id} {...toDo} />\n        ))}\n      </WrapperItem>\n    </Wrapper>\n  );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"lightblue\",\n};\n"],"sourceRoot":""}